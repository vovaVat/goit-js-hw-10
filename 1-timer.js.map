{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('[data-start]');\nconst datetimePicker = document.getElementById('datetime-picker');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\nlet userSelectedDate = null;\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n\n        if (userSelectedDate < Date.now()) {\n            iziToast.error({\n                title: 'Помилка',\n                message: 'Please choose a date in the future',\n            });\n            startButton.disabled = true;\n        } else {\n            startButton.disabled = false;\n        }\n    },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', startTimer);\n\nfunction startTimer() {\n    const intervalId = setInterval(() => {\n        const timeNow = Date.now();\n        const timeDifference = userSelectedDate - timeNow;\n\n        if (timeDifference <= 0) {\n            clearInterval(intervalId);\n            iziToast.success({\n                title: 'Готово',\n                message: 'Время истекло!',\n            });\n            return;\n        }\n\n        const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n        daysSpan.textContent = addLeadingZero(days);\n        hoursSpan.textContent = addLeadingZero(hours);\n        minutesSpan.textContent = addLeadingZero(minutes);\n        secondsSpan.textContent = addLeadingZero(seconds);\n    }, 1000);\n\n    startButton.disabled = true;\n    datetimePicker.disabled = true;\n}\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor((ms % hour) / minute);\n    const seconds = Math.floor((ms % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n"],"names":["startButton","datetimePicker","daysSpan","hoursSpan","minutesSpan","secondsSpan","userSelectedDate","options","selectedDates","iziToast","flatpickr","startTimer","intervalId","timeNow","timeDifference","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"sGAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAC3D,IAAIC,EAAmB,KAEvB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBF,EAAmBE,EAAc,CAAC,EAE9BF,EAAmB,KAAK,OACxBG,EAAS,MAAM,CACX,MAAO,UACP,QAAS,oCACzB,CAAa,EACDT,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE9B,CACL,EAEAU,EAAUT,EAAgBM,CAAO,EAEjCP,EAAY,iBAAiB,QAASW,CAAU,EAEhD,SAASA,GAAa,CAClB,MAAMC,EAAa,YAAY,IAAM,CACjC,MAAMC,EAAU,KAAK,MACfC,EAAiBR,EAAmBO,EAE1C,GAAIC,GAAkB,EAAG,CACrB,cAAcF,CAAU,EACxBH,EAAS,QAAQ,CACb,MAAO,SACP,QAAS,gBACzB,CAAa,EACD,MACH,CAED,KAAM,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAc,EAElEZ,EAAS,YAAckB,EAAeL,CAAI,EAC1CZ,EAAU,YAAciB,EAAeJ,CAAK,EAC5CZ,EAAY,YAAcgB,EAAeH,CAAO,EAChDZ,EAAY,YAAce,EAAeF,CAAO,CACnD,EAAE,GAAI,EAEPlB,EAAY,SAAW,GACvBC,EAAe,SAAW,EAC9B,CAEA,SAASkB,EAAUE,EAAI,CAMnB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAOI,EAAK,KAAQ,GAAM,EACzCH,EAAU,KAAK,MAAOG,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,SAASE,EAAeE,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}